Episode -2 

1) NPM - Manages packages but not stands for node , its manages every package
2) package.json - manages all the dependencies in the project
3) Bundler - webpack , Vite, parcel
    2 types of dependencies -  
    1) dev dependencies - required for development 
    2) normal dependencies- used in production
    " npm i -D parcel "  (to install js Bundler  -D means dev dependencies)
    " npm install -D parcel-bundler"
    difference b/w ^ and ~ in package.json
    package.json vs package-lock.json ?
    package-lock.json - its has hash which means  same package in local and prod
4) Transitive dependencies: when we do npm i for one specific package , many packages installed , dependencies loop or tree
5) How many package.json in project - every package in nodemodules have each package.json, it has its own and dev dependencies
6) NPX - To executing the package. 
   How to build app using parcel
   npx parcel index.html(source file) - local build 
   npm parcel build index.html        - prod build (remove "main": "app.js" from package.json)
7) browsers list in package.json
"browsersList":[
    "last 2 Chrome versions",
    "last 2 Opera versions"
  ]



Episode - 3

1) JSX - JS syntax to easier to create elements
    - not a part of react, but it make dev easy
    - JSX is not HTML inside in JS
    - JSX is HTML like syntax
    - JSX code is traspiling before going to JS engine
    - transpiling is done by Babel (converting into JS)
    - JSX snatizes data and prevent cross siide scripting
2) JSX is converted to react.createElement and the element is converted to reactElement object and then converted to HTML element while rendering
    JSX => React.createElement => ReactElement(JS object) => HTMLElement(render)
    This is all done by Babel (transpiling)

3) Attributes in JSX is camelCase
4) IF written in multiple line use it with () braces

5) There are 2 types of components are in react 
    1) Class based  (old)
    2) Functional based (new)

    2) Function Component - simple JS function (First letter is capital) which returns some JSX/react element
       it should render like <HeadingComponent />
       component composition - component inside component, composing 2 components in to one another 